{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","translateX","gap","moveToNext","props","images","step","frameSize","itemWidth","infinite","imagesLength","length","newValue","maxScrol","setState","moveToPrev","this","animationDuration","containerSize","className","style","width","transform","transition","map","image","index","height","src","alt","type","onClick","Component","App","setStep","event","curentValue","Number","currentTarget","value","setItemWidth","setFrameSize","setAnimationDuration","setInfinite","isChecked","checked","action","method","htmlFor","id","onChange","min","max","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3618f477.chunk.js","sourcesContent":["import { Component } from 'react';\nimport './Carousel.scss';\nimport './button.scss';\n// import classNames from 'classnames';\nimport { Carousel as Props } from '../types/Carousel';\n\ntype State = {\n  translateX: number,\n};\n\nexport class Carousel extends Component<Props, State> {\n  state: Readonly<State> = {\n    translateX: 0,\n  };\n\n  gap = 10;\n\n  // calculateWraperClasses = ({ frameSize, itemWidth }: Props) => {\n  //   const containerSize = frameSize * itemWidth + this.gap * (frameSize - 1);\n\n  //   const classes = [\n  //     'Carousel__list-wrapper',\n  //     `size-${containerSize}`,\n  //   ];\n\n  //   return classNames(...classes);\n  // };\n\n  // calculateListClasses = ({ animationDuration }: Props) => {\n  //   const { translateX } = this.state;\n\n  //   const classes = [\n  //     'Carousel__list',\n  //     `move-to-${translateX}`,\n  //     `Animation-duration-${animationDuration}`,\n  //   ];\n\n  //   return classNames(...classes);\n  // };\n\n  // calculateItemClasses = ({ itemWidth }: Props) => {\n  //   const classes = [\n  //     'Carousel__list-item',\n  //     `item-size-${itemWidth}`,\n  //   ];\n\n  //   return classNames(...classes);\n  // };\n\n  moveToNext = () => {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      infinite,\n    } = this.props;\n\n    const imagesLength = images.length;\n    const gap = (step * this.gap);\n    const newValue = itemWidth * step + gap;\n    const maxScrol = (itemWidth * imagesLength)\n      + (this.gap * imagesLength)\n      - (frameSize * itemWidth + this.gap * frameSize);\n\n    this.setState((state) => {\n      if (state.translateX === maxScrol && infinite) {\n        return {\n          translateX: 0,\n        };\n      }\n\n      if (state.translateX + newValue >= maxScrol) {\n        return {\n          translateX: maxScrol,\n        };\n      }\n\n      return {\n        translateX: state.translateX + newValue,\n      };\n    });\n  };\n\n  moveToPrev = () => {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      infinite,\n    } = this.props;\n\n    const imagesLength = images.length;\n    const gap = (step * this.gap);\n    const newValue = itemWidth * step + gap;\n    const maxScrol = (itemWidth * imagesLength)\n      + (this.gap * imagesLength)\n      - (frameSize * itemWidth + this.gap * frameSize);\n\n    this.setState((state) => {\n      if (state.translateX === 0 && infinite) {\n        return {\n          translateX: maxScrol,\n        };\n      }\n\n      if (state.translateX - newValue <= 0) {\n        return {\n          translateX: 0,\n        };\n      }\n\n      return {\n        translateX: state.translateX - newValue,\n      };\n    });\n  };\n\n  render() {\n    const {\n      images,\n      itemWidth,\n      frameSize,\n      animationDuration,\n    } = this.props;\n\n    const { translateX } = this.state;\n\n    const containerSize = frameSize * itemWidth + this.gap * (frameSize - 1);\n\n    return (\n      <div className=\"Carousel\">\n        <div\n          className=\"Carousel__list-wrapper\"\n          style={{\n            width: containerSize,\n          }}\n        >\n          <ul\n            className=\"Carousel__list\"\n            style={{\n              transform: `translateX(${-translateX}px)`,\n              transition: `transform ${animationDuration}ms ease`,\n            }}\n          >\n            {\n              images.map((image, index) => (\n                <li\n                  key={image}\n                  className=\"Carousel__list-item\"\n                  style={{\n                    width: itemWidth,\n                    height: itemWidth,\n                  }}\n                >\n                  <img\n                    className=\"Carousel__item-img\"\n                    src={image}\n                    alt={`${index + 1}`}\n                    width={itemWidth}\n                  />\n                </li>\n              ))\n            }\n          </ul>\n        </div>\n\n        <div className=\"button-container\">\n          <button\n            className=\"button button-prev\"\n            type=\"button\"\n            onClick={this.moveToPrev}\n          >\n            {/* Prev */}\n          </button>\n\n          <button\n            className=\"button button-next\"\n            data-cy=\"next\"\n            type=\"button\"\n            onClick={this.moveToNext}\n          >\n            {/* Next */}\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './Page/Page.scss';\nimport { Carousel } from './components/Carousel';\nimport { Carousel as State } from './types/Carousel';\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  setStep = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const curentValue = Number(event.currentTarget.value);\n\n    switch (true) {\n      case curentValue > 10:\n        this.setState({ step: 10 });\n        break;\n      case curentValue < 0:\n        this.setState({ step: 0 });\n        break;\n\n      default:\n        this.setState({ step: curentValue });\n        break;\n    }\n  };\n\n  setItemWidth = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const curentValue = Number(event.currentTarget.value);\n\n    switch (true) {\n      case curentValue > 1300:\n        this.setState({ itemWidth: 1300 });\n        break;\n      case curentValue < 0:\n        this.setState({ itemWidth: 0 });\n        break;\n\n      default:\n        this.setState({ itemWidth: curentValue });\n        break;\n    }\n  };\n\n  setFrameSize = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const curentValue = Number(event.currentTarget.value);\n\n    switch (true) {\n      case curentValue > 10:\n        this.setState({ frameSize: 10 });\n        break;\n      case curentValue < 0:\n        this.setState({ frameSize: 0 });\n        break;\n\n      default:\n        this.setState({ frameSize: curentValue });\n        break;\n    }\n  };\n\n  setAnimationDuration = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const curentValue = Number(event.currentTarget.value);\n\n    switch (true) {\n      case curentValue > 10000:\n        this.setState({ animationDuration: 10000 });\n        break;\n      case curentValue < 0:\n        this.setState({ animationDuration: 0 });\n        break;\n\n      default:\n        this.setState({ animationDuration: curentValue });\n        break;\n    }\n  };\n\n  setInfinite = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const isChecked = event.currentTarget.checked;\n\n    this.setState({\n      infinite: isChecked,\n    });\n  };\n\n  render() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App Page\">\n        {/* eslint-disable-next-line */}\n        <h1 className=\"Page__title\" data-cy=\"title\">Carousel with {images.length} images</h1>\n\n        <form\n          action=\"#\"\n          method=\"post\"\n          className=\"Page__form\"\n        >\n          <div className=\"Page__Input-block\">\n            <label className=\"Page__input-lable\" htmlFor=\"stepId\">\n              {'Step '}\n            </label>\n\n            <input\n              className=\"Page__input\"\n              id=\"stepId\"\n              type=\"number\"\n              value={step}\n              onChange={(event) => this.setStep(event)}\n              min=\"1\"\n              max=\"10\"\n            />\n          </div>\n\n          <div className=\"Page__Input-block\">\n            <label className=\"Page__input-lable\" htmlFor=\"frameId\">\n              {'Frame Size '}\n            </label>\n\n            <input\n              className=\"Page__input\"\n              id=\"frameId\"\n              type=\"number\"\n              value={frameSize}\n              onChange={(event) => this.setFrameSize(event)}\n              min=\"1\"\n              max=\"10\"\n            />\n          </div>\n\n          <div className=\"Page__Input-block\">\n            <label className=\"Page__input-lable\" htmlFor=\"itemId\">\n              {'Item Width '}\n            </label>\n\n            <input\n              className=\"Page__input\"\n              id=\"itemId\"\n              type=\"number\"\n              value={itemWidth}\n              onChange={(event) => this.setItemWidth(event)}\n              min=\"130\"\n              max=\"1300\"\n            />\n          </div>\n\n          <div className=\"Page__Input-block\">\n            <label className=\"Page__input-lable\" htmlFor=\"Animation\">\n              {'Animation Duration '}\n            </label>\n\n            <input\n              className=\"Page__input\"\n              id=\"Animation\"\n              type=\"number\"\n              value={animationDuration}\n              onChange={(event) => this.setAnimationDuration(event)}\n              min=\"500\"\n              max=\"10000\"\n            />\n          </div>\n\n          <div className=\"Page__Input-block\">\n            <label className=\"Page__input-lable\" htmlFor=\"infinite\">\n              {'infinite '}\n            </label>\n            <input\n              id=\"infinite\"\n              type=\"checkbox\"\n              onChange={(event) => this.setInfinite(event)}\n            />\n          </div>\n        </form>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}
{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","translateX","gap","calculateWraperClasses","frameSize","containerSize","itemWidth","classes","classNames","calculateListClasses","animationDuration","calculateItemClasses","moveToNext","props","images","step","infinite","imagesLength","length","newValue","maxScrol","setState","moveToPrev","this","className","map","image","index","src","alt","width","type","onClick","Component","App","setStep","event","curentValue","Number","target","value","setItemWidth","setFrameSize","setAnimationDuration","setInfinite","isChecked","checked","action","method","htmlFor","id","defaultValue","onChange","min","max","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4cd63148.chunk.js","sourcesContent":["import { Component } from 'react';\nimport './Carousel.scss';\nimport classNames from 'classnames';\nimport { Carousel as Props } from '../types/Carousel';\n\ntype State = {\n  translateX: number,\n};\n\nexport class Carousel extends Component<Props, State> {\n  state: Readonly<State> = {\n    translateX: 0,\n  };\n\n  gap = 10;\n\n  calculateWraperClasses = ({ frameSize, itemWidth }: Props) => {\n    const containerSize = frameSize * itemWidth + this.gap * (frameSize - 1);\n\n    const classes = [\n      'Carousel__list-wrapper',\n      `size-${containerSize}`,\n    ];\n\n    return classNames(...classes);\n  };\n\n  calculateListClasses = ({ animationDuration }: Props) => {\n    const { translateX } = this.state;\n\n    const classes = [\n      'Carousel__list',\n      `move-to-${translateX}`,\n      `Animation-duration-${animationDuration}`,\n    ];\n\n    return classNames(...classes);\n  };\n\n  calculateItemClasses = ({ itemWidth }: Props) => {\n    const classes = [\n      'Carousel__list-item',\n      `item-size-${itemWidth}`,\n    ];\n\n    return classNames(...classes);\n  };\n\n  moveToNext = () => {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      infinite,\n    } = this.props;\n\n    const imagesLength = images.length;\n    const gap = (step * this.gap);\n    const newValue = itemWidth * step + gap;\n    const maxScrol = (itemWidth * imagesLength)\n      + (this.gap * imagesLength)\n      - (frameSize * itemWidth + this.gap * frameSize);\n\n    this.setState((state) => {\n      if (state.translateX === maxScrol && infinite) {\n        return {\n          translateX: 0,\n        };\n      }\n\n      if (state.translateX + newValue >= maxScrol) {\n        return {\n          translateX: maxScrol,\n        };\n      }\n\n      return {\n        translateX: state.translateX + newValue,\n      };\n    });\n  };\n\n  moveToPrev = () => {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      infinite,\n    } = this.props;\n\n    const imagesLength = images.length;\n    const gap = (step * this.gap);\n    const newValue = itemWidth * step + gap;\n    const maxScrol = (itemWidth * imagesLength)\n      + (this.gap * imagesLength)\n      - (frameSize * itemWidth + this.gap * frameSize);\n\n    this.setState((state) => {\n      if (state.translateX === 0 && infinite) {\n        return {\n          translateX: maxScrol,\n        };\n      }\n\n      if (state.translateX - newValue <= 0) {\n        return {\n          translateX: 0,\n        };\n      }\n\n      return {\n        translateX: state.translateX - newValue,\n      };\n    });\n  };\n\n  render() {\n    const {\n      images,\n      itemWidth,\n    } = this.props;\n\n    return (\n      <div className=\"Carousel\">\n        <div className={this.calculateWraperClasses(this.props)}>\n          <ul className={this.calculateListClasses(this.props)}>\n            {\n              images.map((image, index) => (\n                <li\n                  key={image}\n                  className={this.calculateItemClasses(this.props)}\n                >\n                  <img\n                    className=\"Carousel__item-img\"\n                    src={image}\n                    alt={`${index + 1}`}\n                    width={itemWidth}\n                  />\n                </li>\n              ))\n            }\n          </ul>\n        </div>\n\n        <div className=\"button-container\">\n          <button type=\"button\" onClick={this.moveToPrev}>Prev</button>\n\n          <button\n            data-cy=\"next\"\n            type=\"button\"\n            onClick={this.moveToNext}\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './Page/Page.scss';\nimport { Carousel } from './components/Carousel';\nimport { Carousel as State } from './types/Carousel';\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  setStep = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const curentValue = Number(event.target.value);\n\n    let newValue;\n\n    switch (true) {\n      case curentValue > 10:\n        newValue = 10;\n        break;\n      case curentValue < 0:\n        newValue = 0;\n        break;\n\n      default:\n        newValue = curentValue;\n        break;\n    }\n\n    this.setState({\n      step: newValue,\n    });\n  };\n\n  setItemWidth = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const curentValue = Number(event.target.value);\n\n    let newValue;\n\n    switch (true) {\n      case curentValue > 1300:\n        newValue = 1300;\n        break;\n      case curentValue < 130:\n        newValue = 130;\n        break;\n\n      default:\n        newValue = curentValue;\n        break;\n    }\n\n    this.setState({\n      itemWidth: newValue,\n    });\n  };\n\n  setFrameSize = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const curentValue = Number(event.target.value);\n\n    let newValue;\n\n    switch (true) {\n      case curentValue > 10:\n        newValue = 10;\n        break;\n      case curentValue < 1:\n        newValue = 1;\n        break;\n\n      default:\n        newValue = curentValue;\n        break;\n    }\n\n    this.setState({\n      frameSize: newValue,\n    });\n  };\n\n  setAnimationDuration = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const curentValue = Number(event.target.value);\n\n    let newValue;\n\n    switch (true) {\n      case curentValue > 10000:\n        newValue = 10000;\n        break;\n      case curentValue < 500:\n        newValue = 500;\n        break;\n\n      default:\n        newValue = curentValue;\n        break;\n    }\n\n    this.setState({\n      animationDuration: newValue,\n    });\n  };\n\n  setInfinite = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const isChecked = event.target.checked;\n\n    this.setState({\n      infinite: isChecked,\n    });\n  };\n\n  render() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App Page\">\n        {/* eslint-disable-next-line */}\n        <h1 data-cy=\"title\">Carousel with {images.length} images</h1>\n\n        <form\n          action=\"#\"\n          method=\"post\"\n          className=\"Page__form\"\n        >\n          <div className=\"Page__Input-block\">\n            <label className=\"Page__input-lable\" htmlFor=\"stepId\">\n              {'Step '}\n            </label>\n\n            <input\n              className=\"Page__input\"\n              id=\"stepId\"\n              type=\"number\"\n              defaultValue={step}\n              onChange={(event) => this.setStep(event)}\n              min=\"1\"\n              max=\"10\"\n            />\n          </div>\n\n          <div className=\"Page__Input-block\">\n            <label className=\"Page__input-lable\" htmlFor=\"frameId\">\n              {'Frame Size '}\n            </label>\n\n            <input\n              className=\"Page__input\"\n              id=\"frameId\"\n              type=\"number\"\n              defaultValue={frameSize}\n              onChange={(event) => this.setFrameSize(event)}\n              min=\"1\"\n              max=\"10\"\n            />\n          </div>\n\n          <div className=\"Page__Input-block\">\n            <label className=\"Page__input-lable\" htmlFor=\"itemId\">\n              {'Item Width '}\n            </label>\n\n            <input\n              className=\"Page__input\"\n              id=\"itemId\"\n              type=\"number\"\n              defaultValue={itemWidth}\n              onChange={(event) => this.setItemWidth(event)}\n              min=\"130\"\n              max=\"1300\"\n            />\n          </div>\n\n          <div className=\"Page__Input-block\">\n            <label className=\"Page__input-lable\" htmlFor=\"Animation\">\n              {'Animation Duration '}\n            </label>\n\n            <input\n              className=\"Page__input\"\n              id=\"Animation\"\n              type=\"number\"\n              defaultValue={animationDuration}\n              onChange={(event) => this.setAnimationDuration(event)}\n              min=\"500\"\n              max=\"10000\"\n            />\n          </div>\n\n          <div className=\"Page__Input-block\">\n            <label className=\"Page__input-lable\" htmlFor=\"infinite\">\n              {'infinite '}\n            </label>\n            <input\n              id=\"infinite\"\n              type=\"checkbox\"\n              onChange={(event) => this.setInfinite(event)}\n            />\n          </div>\n        </form>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}